/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface L2ERC20ReceiverInterface extends utils.Interface {
  contractName: "L2ERC20Receiver";
  functions: {
    "finalizeDeposit(address,address,uint256,bytes)": FunctionFragment;
    "l2Bridge()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "finalizeDeposit",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "l2Bridge", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "finalizeDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "l2Bridge", data: BytesLike): Result;

  events: {
    "DepositFinalized(address,address,uint256,uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositFinalized"): EventFragment;
}

export type DepositFinalizedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string, BigNumber],
  {
    from: string;
    to: string;
    amount: BigNumber;
    param1: BigNumber;
    param2: string;
    value: BigNumber;
  }
>;

export type DepositFinalizedEventFilter =
  TypedEventFilter<DepositFinalizedEvent>;

export interface L2ERC20Receiver extends BaseContract {
  contractName: "L2ERC20Receiver";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L2ERC20ReceiverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    finalizeDeposit(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    l2Bridge(overrides?: CallOverrides): Promise<[string]>;
  };

  finalizeDeposit(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  l2Bridge(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    finalizeDeposit(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    l2Bridge(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DepositFinalized(address,address,uint256,uint256,address,uint256)"(
      from?: string | null,
      to?: string | null,
      amount?: null,
      param1?: null,
      param2?: null,
      value?: null
    ): DepositFinalizedEventFilter;
    DepositFinalized(
      from?: string | null,
      to?: string | null,
      amount?: null,
      param1?: null,
      param2?: null,
      value?: null
    ): DepositFinalizedEventFilter;
  };

  estimateGas: {
    finalizeDeposit(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    l2Bridge(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    finalizeDeposit(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    l2Bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
