/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  L2ERC20Receiver,
  L2ERC20ReceiverInterface,
} from "../L2ERC20Receiver";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract L2StandardBridge",
        name: "_l2Bridge",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "param1",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "param2",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "DepositFinalized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "finalizeDeposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "l2Bridge",
    outputs: [
      {
        internalType: "contract L2StandardBridge",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161030a38038061030a83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610277806100936000396000f3fe6080604052600436106100295760003560e01c80636ef6d6261461002e578063ae1f6aaf14610043575b600080fd5b61004161003c366004610172565b61007f565b005b34801561004f57600080fd5b50600054610063906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6000546001600160a01b031633146100ce5760405162461bcd60e51b815260206004820152600e60248201526d4f6e6c79204c322042726964676560901b604482015260640160405180910390fd5b6000806100dd83850185610211565b91509150856001600160a01b0316876001600160a01b03167f70d379f1ca144caaf04ccffc64503304dadb8f14bde4bc35f0c7bfda5837b66887858534604051610149949392919093845260208401929092526001600160a01b03166040830152606082015260800190565b60405180910390a350505050505050565b6001600160a01b038116811461016f57600080fd5b50565b60008060008060006080868803121561018a57600080fd5b85356101958161015a565b945060208601356101a58161015a565b935060408601359250606086013567ffffffffffffffff808211156101c957600080fd5b818801915088601f8301126101dd57600080fd5b8135818111156101ec57600080fd5b8960208285010111156101fe57600080fd5b9699959850939650602001949392505050565b6000806040838503121561022457600080fd5b8235915060208301356102368161015a565b80915050925092905056fea2646970667358221220774c963d4e7d6c9456eb1338044f51d8f1f73895386023d2c0fb82a10732ee1c64736f6c63430008180033";

type L2ERC20ReceiverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: L2ERC20ReceiverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class L2ERC20Receiver__factory extends ContractFactory {
  constructor(...args: L2ERC20ReceiverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "L2ERC20Receiver";
  }

  deploy(
    _l2Bridge: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<L2ERC20Receiver> {
    return super.deploy(_l2Bridge, overrides || {}) as Promise<L2ERC20Receiver>;
  }
  getDeployTransaction(
    _l2Bridge: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_l2Bridge, overrides || {});
  }
  attach(address: string): L2ERC20Receiver {
    return super.attach(address) as L2ERC20Receiver;
  }
  connect(signer: Signer): L2ERC20Receiver__factory {
    return super.connect(signer) as L2ERC20Receiver__factory;
  }
  static readonly contractName: "L2ERC20Receiver";
  public readonly contractName: "L2ERC20Receiver";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): L2ERC20ReceiverInterface {
    return new utils.Interface(_abi) as L2ERC20ReceiverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): L2ERC20Receiver {
    return new Contract(address, _abi, signerOrProvider) as L2ERC20Receiver;
  }
}
