/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IZtakingPoolInterface extends utils.Interface {
  contractName: "IZtakingPool";
  functions: {
    "blockMigrator(address,bool)": FunctionFragment;
    "depositETHFor(address)": FunctionFragment;
    "depositFor(address,address,uint256)": FunctionFragment;
    "migrate(address[],address,address,uint256,bytes)": FunctionFragment;
    "migrateWithSig(address,address[],address,address,uint256,bytes)": FunctionFragment;
    "pause()": FunctionFragment;
    "setStakable(address,bool)": FunctionFragment;
    "setZircuitSigner(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "blockMigrator",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETHFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFor",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [string[], string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateWithSig",
    values: [string, string[], string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setStakable",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setZircuitSigner",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "blockMigrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositETHFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrateWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStakable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setZircuitSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "BlocklistChanged(address,bool)": EventFragment;
    "Deposit(uint256,address,address,uint256)": EventFragment;
    "Migrate(uint256,address,address[],address,address,uint256[])": EventFragment;
    "SignerChanged(address)": EventFragment;
    "TokenStakabilityChanged(address,bool)": EventFragment;
    "Withdraw(uint256,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BlocklistChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Migrate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenStakabilityChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type BlocklistChangedEvent = TypedEvent<
  [string, boolean],
  { migrator: string; blocked: boolean }
>;

export type BlocklistChangedEventFilter =
  TypedEventFilter<BlocklistChangedEvent>;

export type DepositEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  { eventId: BigNumber; depositor: string; token: string; amount: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type MigrateEvent = TypedEvent<
  [BigNumber, string, string[], string, string, BigNumber[]],
  {
    eventId: BigNumber;
    user: string;
    tokens: string[];
    destination: string;
    migrator: string;
    amounts: BigNumber[];
  }
>;

export type MigrateEventFilter = TypedEventFilter<MigrateEvent>;

export type SignerChangedEvent = TypedEvent<[string], { newSigner: string }>;

export type SignerChangedEventFilter = TypedEventFilter<SignerChangedEvent>;

export type TokenStakabilityChangedEvent = TypedEvent<
  [string, boolean],
  { token: string; enabled: boolean }
>;

export type TokenStakabilityChangedEventFilter =
  TypedEventFilter<TokenStakabilityChangedEvent>;

export type WithdrawEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  { eventId: BigNumber; withdrawer: string; token: string; amount: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface IZtakingPool extends BaseContract {
  contractName: "IZtakingPool";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IZtakingPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    blockMigrator(
      _migrator: string,
      _blocklisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositETHFor(
      _for: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositFor(
      _token: string,
      _for: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrate(
      _tokens: string[],
      _migratorContract: string,
      _destination: string,
      _signatureExpiry: BigNumberish,
      _authorizationSignatureFromZircuit: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrateWithSig(
      _user: string,
      _tokens: string[],
      _migratorContract: string,
      _destination: string,
      _signatureExpiry: BigNumberish,
      _stakerSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakable(
      _token: string,
      _canStake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setZircuitSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  blockMigrator(
    _migrator: string,
    _blocklisted: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositETHFor(
    _for: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositFor(
    _token: string,
    _for: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrate(
    _tokens: string[],
    _migratorContract: string,
    _destination: string,
    _signatureExpiry: BigNumberish,
    _authorizationSignatureFromZircuit: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrateWithSig(
    _user: string,
    _tokens: string[],
    _migratorContract: string,
    _destination: string,
    _signatureExpiry: BigNumberish,
    _stakerSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakable(
    _token: string,
    _canStake: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setZircuitSigner(
    _signer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    blockMigrator(
      _migrator: string,
      _blocklisted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    depositETHFor(_for: string, overrides?: CallOverrides): Promise<void>;

    depositFor(
      _token: string,
      _for: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    migrate(
      _tokens: string[],
      _migratorContract: string,
      _destination: string,
      _signatureExpiry: BigNumberish,
      _authorizationSignatureFromZircuit: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    migrateWithSig(
      _user: string,
      _tokens: string[],
      _migratorContract: string,
      _destination: string,
      _signatureExpiry: BigNumberish,
      _stakerSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    setStakable(
      _token: string,
      _canStake: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setZircuitSigner(_signer: string, overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BlocklistChanged(address,bool)"(
      migrator?: null,
      blocked?: null
    ): BlocklistChangedEventFilter;
    BlocklistChanged(
      migrator?: null,
      blocked?: null
    ): BlocklistChangedEventFilter;

    "Deposit(uint256,address,address,uint256)"(
      eventId?: BigNumberish | null,
      depositor?: string | null,
      token?: string | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(
      eventId?: BigNumberish | null,
      depositor?: string | null,
      token?: string | null,
      amount?: null
    ): DepositEventFilter;

    "Migrate(uint256,address,address[],address,address,uint256[])"(
      eventId?: BigNumberish | null,
      user?: string | null,
      tokens?: null,
      destination?: null,
      migrator?: null,
      amounts?: null
    ): MigrateEventFilter;
    Migrate(
      eventId?: BigNumberish | null,
      user?: string | null,
      tokens?: null,
      destination?: null,
      migrator?: null,
      amounts?: null
    ): MigrateEventFilter;

    "SignerChanged(address)"(newSigner?: null): SignerChangedEventFilter;
    SignerChanged(newSigner?: null): SignerChangedEventFilter;

    "TokenStakabilityChanged(address,bool)"(
      token?: null,
      enabled?: null
    ): TokenStakabilityChangedEventFilter;
    TokenStakabilityChanged(
      token?: null,
      enabled?: null
    ): TokenStakabilityChangedEventFilter;

    "Withdraw(uint256,address,address,uint256)"(
      eventId?: BigNumberish | null,
      withdrawer?: string | null,
      token?: string | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      eventId?: BigNumberish | null,
      withdrawer?: string | null,
      token?: string | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    blockMigrator(
      _migrator: string,
      _blocklisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositETHFor(
      _for: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositFor(
      _token: string,
      _for: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrate(
      _tokens: string[],
      _migratorContract: string,
      _destination: string,
      _signatureExpiry: BigNumberish,
      _authorizationSignatureFromZircuit: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrateWithSig(
      _user: string,
      _tokens: string[],
      _migratorContract: string,
      _destination: string,
      _signatureExpiry: BigNumberish,
      _stakerSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakable(
      _token: string,
      _canStake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setZircuitSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    blockMigrator(
      _migrator: string,
      _blocklisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositETHFor(
      _for: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositFor(
      _token: string,
      _for: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrate(
      _tokens: string[],
      _migratorContract: string,
      _destination: string,
      _signatureExpiry: BigNumberish,
      _authorizationSignatureFromZircuit: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrateWithSig(
      _user: string,
      _tokens: string[],
      _migratorContract: string,
      _destination: string,
      _signatureExpiry: BigNumberish,
      _stakerSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakable(
      _token: string,
      _canStake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setZircuitSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
